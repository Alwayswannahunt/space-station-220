// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.Surgery;
using Content.Shared.SS220.Surgery.Graph;
using Content.Shared.SS220.Surgery.Ui;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.Surgery.Ui;

[GenerateTypedNameReferences]
public sealed partial class SurgeryDrapeMenu : FancyWindow
{
    public EntityUid Target;
    public EntityUid Performer;

    public SurgeryDrapeMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Puppet.Initialize();

        // SS220_TODO: Add by alphabet
        foreach (var part in Enum.GetValues<PuppetParts>().OrderBy(variant => LocPuppetPartPath(variant)))
        {
            var textPart = MakePuppetPartButton(part);
            PuppetPartContainer.AddChild(textPart);
        }
    }

    public void UpdateOperations(List<SurgeryGraphPrototype> graphPrototypes)
    {

    }

    private PuppetPartButton MakePuppetPartButton(PuppetParts part)
    {
        var partButton = new PuppetPartButton
        {
            Text = Loc.GetString(LocPuppetPartPath(part)),
            Part = part,
            Pressed = part == Puppet.SelectedPart,
            ToggleMode = true,
            StyleClasses = { "OpenBoth" }
        };

        partButton.OnPressed += (_) =>
        {
            Puppet.SelectedPart = part;
            UpdatePuppetPartButtons();
        };

        return partButton;
    }

    private string LocPuppetPartPath(PuppetParts part)
    {
        return Enum.GetName(typeof(PuppetParts), part)!;
    }

    private void UpdatePuppetPartButtons()
    {
        foreach (var child in PuppetPartContainer.Children)
        {
            if (child is not PuppetPartButton button)
                continue;

            button.Pressed = button.Part == Puppet.SelectedPart;
        }
    }

    private sealed class PuppetPartButton : Button
    {
        public PuppetParts Part;
    }
}
