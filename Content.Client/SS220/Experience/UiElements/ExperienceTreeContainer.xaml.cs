// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Linq;
using Content.Shared.FixedPoint;
using Content.Shared.SS220.Experience;
using Content.Shared.SS220.Experience.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Input;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.SS220.Experience.UiElements;

[GenerateTypedNameReferences]
public sealed partial class ExperienceTreeContainer : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public event Action<BaseButton.ButtonEventArgs>? OnAddSubLevelPressed;

    // common
    // TODO
    private ResPath _fullBarResPath = new ResPath("");
    // TODO
    private ResPath _emptyBarResPath = new ResPath("");
    private ShaderInstance _fillingShaderInstance;
    private readonly ProtoId<ShaderPrototype> _fillingShaderProto = "CircleMask";
    // general info
    private int _numberOfSublevels;
    private ResPath? _skillIconResPath = null;
    private string _skillName = string.Empty;
    private List<ProtoId<SkillPrototype>> _treeSkills = [];
    // skill info
    private int _currentLevel;
    private int _currentSubLevel;
    // progress
    private FixedPoint4 _progress;
    // level up data (TODO)
    private bool _haveFreePoints = true;

    public ExperienceTreeContainer(ProtoId<SkillTreePrototype> protoId, SkillTreeExperienceInfo skillInfo, FixedPoint4 progress)
    {
        IoCManager.InjectDependencies(this);

        UnpackSkillTreeInfo(skillInfo);
        UnpackTreeProto(protoId);

        UnpackSkillProto(_treeSkills.ElementAt(_currentLevel));

        SetProgressAndUpdate(progress);

        _fillingShaderInstance = _prototype.Index(_fillingShaderProto).InstanceUnique();
    }

    public void Update()
    {
        if (_skillIconResPath is not null)
            TreeIconRect.TexturePath = _skillIconResPath.Value.CanonPath;

        TreeName.SetMessage(_skillName);

        for (var i = 0; i < _treeSkills.Count; i++)
        {
            if (i < _currentLevel)
                TreeLevelsContainer.AddChild(GetVisualRect(1f, 1f, 0f));

            if (i > _currentLevel)
                TreeLevelsContainer.AddChild(GetVisualRect(0f, 1f, 0f));

            TreeLevelsContainer.AddChild(GetVisualRect((float)(_currentSubLevel / _numberOfSublevels), 1f, 0f));
        }

        ShowSubLevelsButton.OnPressed += (_) =>
            SubdataContainer.Visible = !SubdataContainer.Visible;

        for (var i = 0; i < _numberOfSublevels; i++)
        {
            if (i < _currentSubLevel)
                SublevelsContainer.AddChild(GetExperienceSublevelVisualRect(ExperienceSystem.EndLearningProgress));

            if (i > _currentSubLevel)
                SublevelsContainer.AddChild(GetExperienceSublevelVisualRect(ExperienceSystem.StartLearningProgress));

            SublevelsContainer.AddChild(GetExperienceSublevelVisualRect(_progress));
        }

        SubmitButton.Visible = _haveFreePoints;
        // TODO visuals
        SubmitButton.OnPressed += (args) => OnAddSubLevelPressed?.Invoke(args);
    }

    public void SetProgressAndUpdate(FixedPoint4 progress)
    {
        _progress = progress;
        var normedParameter = (progress - ExperienceSystem.StartLearningProgress) / (ExperienceSystem.EndLearningProgress - ExperienceSystem.StartLearningProgress);
        _fillingShaderInstance.SetParameter("CircleMult", normedParameter.Float());

        Update();
    }

    private void UnpackSkillTreeInfo(SkillTreeExperienceInfo skillInfo)
    {
        _currentLevel = skillInfo.SkillStudied ? skillInfo.SkillLevel : Math.Max(skillInfo.SkillLevel - 1, 0);
        _currentSubLevel = skillInfo.SkillSublevel;
    }

    private void UnpackTreeProto(ProtoId<SkillTreePrototype> protoId)
    {
        if (_prototype is null)
            return;

        var proto = _prototype.Index(protoId);

        _treeSkills = proto.SkillTree;
    }

    private void UnpackSkillProto(ProtoId<SkillPrototype> protoId)
    {
        if (_prototype is null)
            return;

        var proto = _prototype.Index(protoId);

        _numberOfSublevels = proto.LevelInfo.MaximumSublevel;
        _skillIconResPath = proto.LevelDescription.SkillIconResPath;
        _skillName = proto.LevelDescription.SkillName;
    }

    private TextureRect GetExperienceSublevelVisualRect(FixedPoint4 fillingRatio)
    {
        return GetVisualRect(fillingRatio, ExperienceSystem.EndLearningProgress, ExperienceSystem.StartLearningProgress);
    }

    private TextureRect GetVisualRect(FixedPoint4 fillingRatio, FixedPoint4 endValue, FixedPoint4 firstValue)
    {
        var control = new TextureRect();

        if (fillingRatio == endValue)
        {
            control.TexturePath = _fullBarResPath.CanonPath;
            control.ShaderOverride = null;
            return control;
        }

        if (fillingRatio == firstValue)
        {
            control.TexturePath = _emptyBarResPath.CanonPath;
            control.ShaderOverride = null;
            return control;
        }

        control.TexturePath = _fullBarResPath.CanonPath;
        control.ShaderOverride = _fillingShaderInstance;

        return control;
    }
}
